# We've created a factor for Borough. Now we want to combine levels 2 and 4. Then we'll make sure it worked with the fct_count function again.
F_Borough_Comb <- fct_collapse(F_Borough, "2+4"=c(2, 4))
fct_count(F_Borough_Comb)
# So we've created a new factor called "Factor Borough Combined" where we combined the Bronx and Queens.
# For our next variable "Neighborhood", we're going to want to combine many factor levels together. This will be tricky. I am thinking that we will need to use some logic to combine our factor levels together. Probably we will do it based on keep adding factor levels together until the combined factor level has at least 504 observations in it. Time to figure out how to do this.
fct_count(F_Borough_Comb, prop = FALSE)
fct_count(F_Borough_Comb, prop = TRUE)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
library(tidyverse)
# Now, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are one through four, then nine and ten.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical <- colnames(DATA[, c(1:4, 9:10)])
for (i in vars.categorical) {
x <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x)
}
# A couple of notes:
# Most of our CP's have some levels with small n's that we may want to combine to reduce dimensionality.
# There are some levels that seem to make a large difference in the mean and median of GSF.
# So we're going to need to consider the 5% rule, which states that each factor level should contain at least 5% of the total observations. For our data set, n = 10,079. 0.05*10,079 = 503.95, which we will round up to 504. So each factor level must contain at least 504 observations in it.
# Let's start doing that here.
# We're just going to combine Borough two, which is the Bronx with Borough four, which is Queens because they both border the East River in NYC.We're checking that everything looks good with the factor count function.
library(forcats)
F_Borough <- factor(x = DATA$BOROUGH)
fct_count(F_Borough)
# We've created a factor for Borough. Now we want to combine levels 2 and 4. Then we'll make sure it worked with the fct_count function again.
F_Borough_Comb <- fct_collapse(F_Borough, "2+4"=c(2, 4))
fct_count(F_Borough_Comb, prop = TRUE)
# So we've created a new factor called "Factor Borough Combined" where we combined the Bronx and Queens.
# For our next variable "Neighborhood", we're going to want to combine many factor levels together. This will be tricky. I am thinking that we will need to use some logic to combine our factor levels together. Probably we will do it based on keep adding factor levels together until the combined factor level has at least 504 observations in it. Time to figure out how to do this.
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
library(tidyverse)
# Now, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are one through four, then nine and ten.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical <- colnames(DATA[, c(1:4, 9:10)])
for (i in vars.categorical) {
x <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x)
}
# A couple of notes:
# Most of our CP's have some levels with small n's that we may want to combine to reduce dimensionality.
# There are some levels that seem to make a large difference in the mean and median of GSF.
# So we're going to need to consider the 5% rule, which states that each factor level should contain at least 5% of the total observations. For our data set, n = 10,079. 0.05*10,079 = 503.95, which we will round up to 504. So each factor level must contain at least 504 observations in it.
# Let's start doing that here.
# We're just going to combine Borough two, which is the Bronx with Borough four, which is Queens because they both border the East River in NYC.We're checking that everything looks good with the factor count function.
library(forcats)
F_Borough <- factor(x = DATA$BOROUGH)
fct_count(F_Borough)
# We've created a factor for Borough. Now we want to combine levels 2 and 4. Then we'll make sure it worked with the fct_count function again.
F_Borough_Comb <- fct_collapse(F_Borough, "2+4"=c(2, 4))
fct_count(F_Borough_Comb, prop = TRUE)
# So we've created a new factor called "Factor Borough Combined" where we combined the Bronx and Queens.
# For our next variable "Neighborhood", we're going to want to combine many factor levels together. This will be tricky. I am thinking that we will need to use some logic to combine our factor levels together. Probably we will do it based on keep adding factor levels together until the combined factor level has at least 504 observations in it. Time to figure out how to do this.
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
by_Tax_Clss_Sale_Comb <- DATA %>%
group_by(Tax_Clss_Sale_Comb) %>%
summarise(
mean = mean(Tax_Clss_Sale_Comb),
median = median(Tax_Clss_Sale_Comb)
)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
by_Tax_Clss_Sale_Comb <- DATA %>%
group_by(Tax_Clss_Sale_Comb) %>%
summarise(
mean = mean(Tax_Clss_Sale_Comb),
median = median(Tax_Clss_Sale_Comb)
)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
by_Tax_Clss_Sale_Comb <- DATA %>%
group_by(COMBINED.TAX.CLASS.SALE) %>%
summarise(
mean = mean(COMBINED.TAX.CLASS.SALE),
median = median(COMBINED.TAX.CLASS.SALE)
)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
TAX.CLASS.VARIABLES <- colnames(DATA$TAX.CLASS.AT.TIME.OF.SALE, DATA$COMBINED.TAX.CLASS.SALE)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
TAX.CLASS.VARIABLES <- colnames("TAX.CLASS.AT.TIME.OF.SALE", "DATA$COMBINED.TAX.CLASS.SALE")
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
TAX.CLASS.VARIABLES <- colnames("TAX.CLASS.AT.TIME.OF.SALE", "DATA$COMBINED.TAX.CLASS.SALE")
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
TAX.CLASS.VARIABLES <- colnames(DATA[, c(9, 12)])
for (i in TAX.CLASS.VARIABLES) {
by_Tax_Clss_Sale_VS <- DATA %>%
group_by(i) %>%
summarise(
mean = mean(COMBINED.TAX.CLASS.SALE),
median = median(COMBINED.TAX.CLASS.SALE)
)
print(by_Tax_Clss_Sale_VS)
}
rlang::last_trace()
by_Tax_Clss_Sale_VS <- DATA %>%
group_by(TAX.CLASS.AT.TIME.OF.SALE, COMBINED.TAX.CLASS.SALE) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET)
)
print(by_Tax_Clss_Sale_VS)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
# This first function will show us the mean and median of the Tax Class Variable.
by_Tax_Clss_Sale <- DATA %>%
group_by(TAX.CLASS.AT.TIME.OF.SALE) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET)
)
print(by_Tax_Clss_Sale)
# This function will show us the mean and median of the Combined Tax Class Variable.
by_Tax_Clss_Sale_Combined <- DATA %>%
group_by(COMBINED.TAX.CLASS.SALE) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET)
)
print(by_Tax_Clss_Sale_Combined)
# First, let's look at Tax Class At Time of Sale.
Tax_Clss_Sale <- factor(x = DATA$TAX.CLASS.AT.TIME.OF.SALE)
fct_count(Tax_Clss_Sale)
# We see that this gives us one level of tax class at time of sale that is under 504. This is a little bit worrisome as the information included may potentially mess with whatever factor level it is included in. Let's combine it with factor level 2, as they have a similar median. We will do this by using the
Tax_Clss_Sale_Comb <- fct_collapse(Tax_Clss_Sale, "2+4" = c(2, 4) )
fct_count(f = Tax_Clss_Sale_Comb)
DATA$COMBINED.TAX.CLASS.SALE <-Tax_Clss_Sale_Comb
# Now I want to see how this affected the mean and median of the different groups.
library(tidyverse)
# This first function will show us the mean and median of the Tax Class Variable.
by_Tax_Clss_Sale <- DATA %>%
group_by(TAX.CLASS.AT.TIME.OF.SALE) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET)
)
print(by_Tax_Clss_Sale)
# This function will show us the mean and median of the Combined Tax Class Variable.
by_Tax_Clss_Sale_Combined <- DATA %>%
group_by(COMBINED.TAX.CLASS.SALE) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET)
)
print(by_Tax_Clss_Sale_Combined)
# We see that the mean changes for both groups significanly but the median remains the same!
library(tidyverse)
# Now, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are one through four, then nine and ten.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical <- colnames(DATA[, c(1:4, 9:10)])
for (i in vars.categorical) {
x <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x)
}
# A couple of notes:
# Most of our CP's have some levels with small n's that we may want to combine to reduce dimensionality.
# There are some levels that seem to make a large difference in the mean and median of GSF.
# So we're going to need to consider the 5% rule, which states that each factor level should contain at least 5% of the total observations. For our data set, n = 10,079. 0.05*10,079 = 503.95, which we will round up to 504. So each factor level must contain at least 504 observations in it.
# Let's start doing that here.
# We're just going to combine Borough two, which is the Bronx with Borough four, which is Queens because they both border the East River in NYC.We're checking that everything looks good with the factor count function.
library(forcats)
F_Borough <- factor(x = DATA$BOROUGH)
fct_count(F_Borough)
# We've created a factor for Borough. Now we want to combine levels 2 and 4. Then we'll make sure it worked with the fct_count function again.
F_Borough_Comb <- fct_collapse(F_Borough, "2+4"=c(2, 4))
fct_count(F_Borough_Comb, prop = TRUE)
# So we've created a new factor called "Factor Borough Combined" where we combined the Bronx and Queens. Now we just need to add it to our data set.
DATA$BOROUGH.COMBINED <- F_Borough_Comb
# For our next variable "Neighborhood", we're going to want to combine many factor levels together. This will be tricky. I am thinking that we will need to use some logic to combine our factor levels together. Probably we will do it based on keep adding factor levels together until the combined factor level has at least 504 observations in it. Time to figure out how to do this.
library(tidyverse)
# First, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are column 12 and column 13.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical2 <- colnames(DATA[, c(12, 13)])
for (i in vars.categorical2) {
x2 <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x)
}
library(tidyverse)
# First, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are column 12 and column 13.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical2 <- colnames(DATA[, c(12, 13)])
for (i in vars.categorical2) {
x2 <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x)
}
library(tidyverse)
# First, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are column 12 and column 13.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical2 <- c("COMBINED.TAX.CLASS.SALE", "BOROUGH.COMBINED")
for (i in vars.categorical2) {
x2 <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x2)
}
# Let's look at some graphical displays as well.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot() +
labs(x = i)
print(cat.plot)
}
# Let's look at some graphical displays as well.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
GeomBoxplot() +
labs(x = i)
print(cat.plot)
}
# Let's look at some graphical displays as well.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(, varwidth = TRUE) +
labs(x = i)
print(cat.plot)
}
# HMMM.... This is making me think that there are definetly some outliers in our data set. Let's see what happens if we remove these outliers.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outliers = FALSE) +
labs(x = i)
print(cat.plot)
}
# Let's look at some graphical displays as well.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.color = red) +
labs(x = i)
print(cat.plot)
}
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.color = NULL) +
labs(x = i)
print(cat.plot)
}
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.color = "red") +
labs(x = i)
print(cat.plot)
}
library(tidyverse)
# First, we're going to save the names of our categorical predictors (CP) as a vector. The column numbers that correspond to our CP's are column 12 and column 13.
# Then our function will go ahead and generate the mean and median of Gross Square Feet (GSF) for each level of each CP.
vars.categorical2 <- c("COMBINED.TAX.CLASS.SALE", "BOROUGH.COMBINED")
for (i in vars.categorical2) {
x2 <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x2)
}
# We see a couple of things. 1st: Combined Tax Class Sale seems to have a pretty sizeable impact on GSF. 2nd: Borough Combined also seems to have a noticeable impact on GSF.
# Let's look at some graphical displays as well.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.color = "red") +
labs(x = i)
print(cat.plot)
}
# HMMM.... This is making me think that there are definetly some outliers in our data set. Let's see what happens if we remove these outliers.
for (i in vars.categorical2){
cat.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outliers = FALSE) +
labs(x = i)
print(cat.plot)
}
# Clearly there's some effect that both of these are having on GSF.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
x3 <- DATA %>%
group_by_(i) %>%
summarise(
mean = mean(GROSS.SQUARE.FEET),
median = median(GROSS.SQUARE.FEET),
n = n()
)
print(x3)
}
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot() +
labs(x = i)
print(num.plot)
}
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot() +
labs(x = i)
print(num.plot)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outliers = 'red') +
labs(x = i)
print(num.plot)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.colour = 'red') +
labs(x = i)
print(num.plot)
}
# Uh oh. Clearly
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.colour = 'red') +
labs(x = i)
print(num.plot)
}
# More outliers! Let's remove them for now.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier = FALSE) +
labs(x = i)
print(num.plot)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.colour = 'red') +
labs(x = i)
print(num.plot)
}
# More outliers! Let's remove them for now.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot2 <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier = FALSE) +
labs(x = i)
print(num.plot2)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.colour = 'red') +
labs(x = i)
print(num.plot)
}
# More outliers! Let's remove them for now.
for (i in vars.numerical) {
num.plot2 <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier = FALSE) +
labs(x = i)
print(num.plot2)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outlier.colour = 'red') +
labs(x = i)
print(num.plot)
}
# More outliers! Let's remove them for now.
for (i in vars.numerical) {
num.plot2 <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_boxplot(outliers = FALSE) +
labs(x = i)
print(num.plot2)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_point(outlier.colour = 'red') +
geom_smooth(method = "lm", se = FALSE)
}
# Similar Process to what we were doing above.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
}
# Similar Process to what we were doing above except with a scatterplot function.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = DATA[, i], y = GROSS.SQUARE.FEET)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(num.plot)
}
# Similar Process to what we were doing above except with a scatterplot function.
vars.numerical <- colnames(DATA[, c(5, 6, 8)])
for (i in vars.numerical) {
num.plot <- ggplot(DATA, aes(x = i, y = GROSS.SQUARE.FEET)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(num.plot)
}
# Similar Process to what we were doing above except with a scatterplot function.
num.plot <- ggplot(DATA, aes(x = RESIDENTIAL.UNITS, y = GROSS.SQUARE.FEET, color = BOROUGH.COMBINED)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
print(num.plot)
load("C:/Users/Daniel Scott/Documents/GitHub/Stats-Learning-Final-Project/.RData")
load("C:/Users/Daniel Scott/Documents/GitHub/Stats-Learning-Final-Project/.RData")
